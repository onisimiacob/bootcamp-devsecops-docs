{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevSecOps Bootcamp Documentation","text":"<p>These are  Onisim Iacob personal notes for the  Techworld-With-Nana DevSecOps Bootcamp written in with  Mkdocs-Materials and deployed on  Github Pages as a free static site.</p>"},{"location":"#no-ai-usage","title":"No AI usage","text":""},{"location":"#i-wanted-to-ensure-every-single-word-comes-from-my-mouth-i-do-however-use-ai-at-work-to-increase-my-productivity-but-not-for-this-kind-of-courses","title":"I wanted to ensure every single word comes from my mouth. I do however use AI at work to increase my productivity, but not for this kind of courses.","text":"<p> Check Documented Modules</p>"},{"location":"#to-ensure-copyright-policy","title":"To ensure copyright policy","text":"<ul> <li>I will not use any screenshot of the course itself, nor any PDF from TechWorld with Nana's DevSecOps Bootcamp .</li> </ul>"},{"location":"#objective","title":"Objective","text":"<ul> <li> <p>After completing this Bootcamp, hand this static site to validate my new knewledge, in a modern way.</p> </li> <li> <p>Have the evidence and hands-on resolution of the exercises.</p> </li> <li> <p>I want to keep all this knewledge as a static site for documentation to check it any time I need.</p> </li> <li> <p>Static sites like this, on any real project, can give to the DevOps Engineer a huge value.</p> </li> </ul>"},{"location":"pages/1-security-essentials/","title":"\ud83d\udee1\ufe0f Security Essentials","text":"<ul> <li> <p>In this first module I learned that we need to secure:</p> <ul> <li>Customer data.</li> <li>Company data.</li> <li>Internal applications.</li> <li>User applications.</li> </ul> </li> </ul>","tags":["Attacks","Essentials","OWASP","Top 10"]},{"location":"pages/1-security-essentials/#types-of-security-attacks","title":"Types of Security Attacks","text":"<ul> <li> <p>Phising attack: A human is the target, not a system</p> <ul> <li>User will receive an email, or any other communication in order to get tricked and to give the attacker some sensitive information.</li> </ul> </li> <li> <p>XSS - Cross Site Scripting</p> <ul> <li>Runs malicious code or scripts from malicious sources. When other users get connected, server serves the script which is executed on browser.</li> </ul> </li> <li> <p>CSRF - Client Side Request Forgery</p> <ul> <li>This can steal session information and it happens on the user side, which allows the attacker to pretend be another user.</li> </ul> </li> <li> <p>SSRF - Server Side Request Forgery</p> <ul> <li>This is executed on server which is more complicated, but often, much more dangerous as it can affect all users and can reach other resources, such as database or backend.</li> </ul> </li> <li> <p>SQL Injection</p> <ul> <li>Allows users to inject malicious by exploits on libraries or more typically through unsanatized web applications, modifying the database.</li> </ul> </li> <li> <p>Libraries</p> <ul> <li>They are thirdparty code, so they also have exploits or CVEs (Common Vulerability Exposures), to be identified and updated to stay protected.</li> </ul> </li> <li> <p>Brute Force</p> <ul> <li>Some systems may allow very weak passwords, or does not have MFA (Multi-Factor Authentication) or more specifically, the lack of a ratelimit at API level to avoid brute force.</li> </ul> </li> <li> <p>DoS </p> <ul> <li>Here the lack of any ratelimit may be an issue as it can stress the server. It can be the frontend due to millions of calls, or backend if backend URL is reachable. In worse case scenarios, el Backend is open, attacker can even reach the database blocking new connections and denialing the service from the lowest layer (DB), not having any real Frontend traffic.</li> </ul> </li> <li> <p>Security Principal</p> <ul> <li>We have to secure every possible entrypoint.</li> </ul> </li> </ul>","tags":["Attacks","Essentials","OWASP","Top 10"]},{"location":"pages/1-security-essentials/#owasp-and-owasp-top-10","title":"OWASP and OWASP Top 10","text":"<ol> <li>Broken Control Access:<ul> <li>Users may run actions that shoud not be allowed to (violation of least priviledge principal).</li> </ul> </li> <li>Cryptographic Failures:<ul> <li>Hardcoded data, weak or lack of encryption of information, insecure protocols.</li> </ul> </li> <li>Injection<ul> <li>Allows to inject code such as JavaScript, SQL, NoSQL, OS commands.</li> </ul> </li> <li>Insecure Design<ul> <li>\"Leave it like this, we will fix it later\" and later never comes. Very typical situation on day to day projects...</li> </ul> </li> <li>Security Misconfiguration<ul> <li>Open ports, default passwords, infrastructure default values (public). It applies at every level; newwork, storage, application.</li> </ul> </li> <li>Vulnerable and Outdated Components<ul> <li>Everything is code, so if you fix you code, you also need to apply new versions of libraries.</li> </ul> </li> <li>Indentification and Authentication Failures<ul> <li>Errors at properly identify and authenticate users. Weak user confirmation, passwords, lack of mfa, sessions not invalidated.</li> </ul> </li> <li>Software and Data Integration Failures<ul> <li>Using libraries and plugins from unknown sources with weak digital signature.</li> </ul> </li> <li>Security Logging and Monitoring Failures<ul> <li>Detect breaches and notify attach attempts.</li> </ul> </li> <li>Serverside Request Forgery (SSRF)<ul> <li>Malicious code executing from inside the server itself due to a vulnerability on both infrastructure or application.</li> </ul> </li> </ol>","tags":["Attacks","Essentials","OWASP","Top 10"]},{"location":"pages/10-iac-and-gitops-for-devsecops/","title":"\ud83d\udc68\u200d\ud83d\udcbb IaC and GitOps for DevSecOps","text":""},{"location":"pages/10-iac-and-gitops-for-devsecops/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/11.logging-and-monitoring-for-security/","title":"\ud83d\udcca Logging &amp; Monitoring for Security","text":""},{"location":"pages/11.logging-and-monitoring-for-security/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/12-introduction-to-kubernetes-security/","title":"\u2638\ufe0f Introduction to Kubernetes Security","text":""},{"location":"pages/12-introduction-to-kubernetes-security/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/13-kubernetes-access-management-with-aws-eks/","title":"\ud83d\udd13 Kubernetes Access Management with AWS EKS","text":""},{"location":"pages/13-kubernetes-access-management-with-aws-eks/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/14-secure-iac-pipeline-for-eks-provisioning/","title":"\u2705 Secure IaC Pipeline for EKS provisioning","text":""},{"location":"pages/14-secure-iac-pipeline-for-eks-provisioning/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/15-bootraping-clusters-with-eks-blueprints/","title":"\u2728 Bootstrapping clusters with EKS Blueprints","text":""},{"location":"pages/15-bootraping-clusters-with-eks-blueprints/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/16-application-release-pipeline-with-argocd/","title":"\ud83d\udc19 Application Release Pipeline with ArgoCD","text":""},{"location":"pages/16-application-release-pipeline-with-argocd/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/17-policy-as-code-with-open-policy-agent/","title":"\ud83d\udcd1 Policy as Code with Open Policy Agent","text":""},{"location":"pages/17-policy-as-code-with-open-policy-agent/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/18-secrets-management-in-kubernetes/","title":"\ud83e\udd2b Secrets Management in Kubernetes","text":""},{"location":"pages/18-secrets-management-in-kubernetes/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/19-service-mesh-with-istio/","title":"\ud83d\udd78\ufe0f Service Mesh with Istio","text":""},{"location":"pages/19-service-mesh-with-istio/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/2-introduction-to-devsecops/","title":"\ud83c\udd95 Introduction to DevSecOps","text":"<p>Best security practices are automated and go straight inside the DevOps workflow.</p> <p></p>","tags":["DevSecOps","Skills","Comparison"]},{"location":"pages/2-introduction-to-devsecops/#devsecops-engineer-vs-security-engineer","title":"DevSecOps Engineer vs Security Engineer","text":"<ul> <li> <p>Security Engineer: Focuses on securing systems, networks and infrastructure.</p> </li> <li> <p>DevSecOps Engineer: Integrates security on the entire DevOps, is the connection between Dev, Ops and Security team. It also helps Devs and Security Engineers to discover and fix issues.</p> </li> </ul>","tags":["DevSecOps","Skills","Comparison"]},{"location":"pages/2-introduction-to-devsecops/#skills","title":"Skills","text":"<ul> <li>Bridge between teams.</li> <li>Creates processes to help ensure security.</li> <li>Teaches and shares knewledge.</li> </ul>","tags":["DevSecOps","Skills","Comparison"]},{"location":"pages/20-compliance-as-code/","title":"\ud83e\udd1d Compliance as Code","text":""},{"location":"pages/20-compliance-as-code/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/21-how-to-introduce-devsecops-in-organizations/","title":"\ud83d\udcbc How to Introduce DevSecOps In Organizations","text":""},{"location":"pages/21-how-to-introduce-devsecops-in-organizations/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/22-devsecops-certification/","title":"\ud83c\udf93 DevSecOps Certification","text":""},{"location":"pages/22-devsecops-certification/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/3-application-vulnerability-scanning/","title":"\ud83d\udd0e Application Vulnerability Scanning","text":"","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#exercise-build-a-continuous-integration-pipeline","title":"EXERCISE: Build a Continuous Integration Pipeline","text":"<ul> <li>Create a Gitlab account  </li> <li>Fork the repository: https://gitlab.com/onisimiacob/juice-shop</li> </ul> <p>Note</p> <ul> <li>Starting Code: https://gitlab.com/twn-devsecops-bootcamp/latest/juice-shop/-/tree/feature/starting-code</li> <li>CI Pipeline: https://gitlab.com/twn-devsecops-bootcamp/latest/juice-shop/-/tree/feature/03.01-build-ci</li> </ul> <ul> <li>Add SSH credentials to the Gitlab Account following https://docs.gitlab.com/user/ssh/</li> <li>Clone repository locally.</li> <li>Create a DockerHub account: https://app.docker.com/signup</li> </ul> <p>For this exercise, go to the repository setComparisontings and set <code>juice-shop &gt; CI/CD Settings</code> and set <code>CI/CD configuration file</code> to <code>.gitlab/.gitlab-ci.yml</code>, otherwise the pipeline will try to be created on root folder.</p>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#insecure-pipeline-avoid-saving-passwords-as-variables","title":"INSECURE PIPELINE! Avoid saving passwords as variables!","text":"<pre><code>variables:\n  IMAGE_NAME: onisimiacob/demo-app\n  IMAGE_VERSION: juice-shop-1.0\n\nstages:\n  - cache\n  - test\n  - build\n\n# Improove build times with a cache task that saves the dependencies as an artifact\ncreate_cache:\n  image: node:18-bullseye\n  stage: cache\n  script:\n    - yarn install --ignore-engines \n  cache:\n    key:\n      files:\n        - yarn.lock\n    paths:\n      - node_modules\n      - yarn.lock\n      - .yarn\n    policy: pull-push\n\n# Test using the cache to speedup testing\nyarn_test:\n  image: node:18-bullseye\n  stage: test\n  script:\n    - yarn install --ignore-engines # fix The engine \"node\" is incompatible with this module. Expected version \"20 || &gt;=22\". Got \"18.20.8\"\n    - yarn test\n  cache:\n    key:\n      files:\n        - yarn.lock\n    paths:\n      - node_modules\n      - yarn.lock\n      - .yarn\n    policy: pull\n\n# Build the docker image\nbuild_image:\n  stage: build\n  image: docker:24\n  services:\n    - docker:24-dind\n  variables:\n    DOCKER_USER: onisimiacob\n    DOCKER_PASS: 1234567890!\n  before_script:\n    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin\n  script:\n    - docker build -t $IMAGE_NAME:$IMAGE_VERSION .\n    - docker push $IMAGE_NAME:$IMAGE_VERSION\n</code></pre>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#secure-pipeline","title":"SECURE PIPELINE!","text":"<p>Instead of only building the application, we DevSecOps integrates security through the workflow. Such vulnerabilities could be hardcoded passwords, connection strings (secrets). This is a leaky asset, and you never know where it ends up.</p>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#secret-scanning-with-gitleaks","title":"Secret scanning with Gitleaks","text":"<p>Lightweight open-source application for git repositories that detects over 160 secret types, new types added all the time.</p> <p>Running this command inside the git repository, will mount the \".\" local path with /path inside the docker and allow us to scan for all vulnerabilities.</p> <p>In addition add <code>--verbose</code> flag at the end to see on screen what are the encountered vulnerabilites.</p> <pre><code>docker run -v .:/path zricethezav/gitleaks:latest detect --source=\"/path\" #--verbose to see vulnearbilities on screen\n\n\n    \u25cb\n    \u2502\u2572\n    \u2502 \u25cb\n    \u25cb \u2591\n    \u2591    gitleaks\n\n7:11PM INF 132 commits scanned.\n7:11PM INF scanned ~9214215 bytes (9.21 MB) in 1.93s\n7:11PM WRN leaks found: 42\n</code></pre>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#pre-commit-hook-for-secret-scanning","title":"Pre-Commit hook for secret scanning","text":"<p>We can add <code>hooks</code> such as pre-commits which are actions that gets executed before a push is made to remote. These hooks are stored on <code>.git/hooks/pre-commits</code> </p> <p>Note</p> <p>It can be easily be automated with pre-commit which is a python package.</p>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#false-positives","title":"False Positives","text":"<p>First, we cannot block the pipeline deployment with tools that we are not yet sure on how they may behave. This is why we need to allow builds to continue. This can be achieved with pipeline flags such as:</p> <pre><code>gitleaks:\n  stage: test\n  image:\n    name: zricethezav/gitleaks:latest\n    entrypoint: [\"\"]\n  script:\n    - gitleaks detect --verbose --source .\n  allow_failure: true # &lt;- This allows the task to fail but continue!\n</code></pre>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/3-application-vulnerability-scanning/#pipeline-variables","title":"Pipeline Variables","text":"<p>On the Gitlab Project you can head to <code>juice-shop &gt; CI/CD Settings &gt; Variables &gt; Add variable &gt; Key: DOCKER_PASS; Value: my_pass</code>. </p> <p>Note</p> <p>Only DevOps or repository Admins/Owners (1 or 2 team members) should have access to the repository settings to add or modify variables.</p> <pre><code>...\n  variables:\n   DOCKER_USER: onisimiacob\n   DOCKER_PASS: 1234567890! # BAD PRACTICE!!!\n...\n</code></pre> <p>Warning</p> <p>We should CHANGE THE PASSWORD as we already gitted the password. Gitleaks searches all commits, so we need to recreate a new password to fully fix the issue.</p> <pre><code>...\n  variables:\n   DOCKER_USER: $DOCKER_USER\n   DOCKER_PASS: $DOCKER_PASS # GOOD PRACTICE :)\n...\n</code></pre>","tags":["Vulnerability","Insecure","Practices","Secrets","Cache","Gitleaks","Pre-Commits"]},{"location":"pages/4-vulnerability.management-and-remediation/","title":"\ud83d\udc68\u200d\ud83d\udd27 Vulnerability Management and Remediation","text":""},{"location":"pages/4-vulnerability.management-and-remediation/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/5-vulnerability-scanning-for-application-dependencies/","title":"\ud83d\udd17 Vulnerability Scanning for Application Dependencies","text":""},{"location":"pages/5-vulnerability-scanning-for-application-dependencies/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/6-build-a-cd-pipeline/","title":"\ud83c\udfd7\ufe0f Build a CD Pipeline","text":""},{"location":"pages/6-build-a-cd-pipeline/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/7-image-scanning-build-secure-docker-images/","title":"\ud83d\udc0b Image Scanning - Build Secure Docker Images","text":""},{"location":"pages/7-image-scanning-build-secure-docker-images/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/8-aws-cloud-security-and-access-management/","title":"\ud83d\udfe0 AWS Cloud Security &amp; Access Management","text":""},{"location":"pages/8-aws-cloud-security-and-access-management/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""},{"location":"pages/9-secure-continuous-deployment-and-dast/","title":"\ud83d\udd10 Secure Continuous Deployment &amp; DAST","text":""},{"location":"pages/9-secure-continuous-deployment-and-dast/#work-in-progress","title":"\ud83d\udea7 WORK IN PROGRESS...","text":""}]}